type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/utils/Utils.java
  visible: true
  text: |
    package banking.utils;

    import java.util.Random;

    public class Utils {

        private static final Random rnd = new Random();
        public static final String CARD_PREFIX = "400000";

        private static int randomDigit() {
            return rnd.nextInt(10);
        }

        private static void appendDigits(StringBuilder sb, int count) {
            for (int i = 0; i < count; i++) {
                sb.append(randomDigit());
            }
        }

        public static String createCardNumber() {
            StringBuilder sb = new StringBuilder(CARD_PREFIX);
            appendDigits(sb, 9);
            // TODO: 10/4/21 When the Luhn algorithm is ready, call it, instead of appending 0
            sb.append(0);
            return sb.toString();
        }

        public static String createPin() {
            StringBuilder sb = new StringBuilder();
            appendDigits(sb, 4);
            return sb.toString();
        }
    }
  learner_created: true
- name: src/banking/factories/StateSwitcherFactory.java
  visible: true
  text: |
    package banking.factories;

    import banking.BankingSystemMenus;
    import banking.CurrentStateDataFacade;
    import banking.dao.CardDao;
    import banking.dao.impl.memory.MemoryCardDao;
    import banking.state.StateSwitcher;

    public class StateSwitcherFactory {

        static public StateSwitcher getMemoryStateSwitcher() {
            CardDao cardDao = new MemoryCardDao();
            return getStateSwitcher(cardDao);
        }

        static public StateSwitcher getStateSwitcher(CardDao cardDao) {
            CurrentStateDataFacade dataFacade = new CurrentStateDataFacade(cardDao);
            BankingSystemMenus menus = new BankingSystemMenus(dataFacade);
            return new StateMachineFactory(menus).createStateSwitcher();
        }
    }
  learner_created: true
- name: src/banking/BankingSystemMenus.java
  visible: true
  text: |
    package banking;

    import banking.dao.Card;

    import java.util.Scanner;

    /**
     * Contains all menus for the Banking System CLI interface
     * and abstract data layer invocations
     */
    public class BankingSystemMenus {

        private final Scanner scanner = new Scanner(System.in);
        private final CurrentStateDataFacade dataFacade;

        public BankingSystemMenus(CurrentStateDataFacade dataFacade) {
            this.dataFacade = dataFacade;
        }

        public int mainMenu() {
            System.out.println("\n1. Create an account\n" +
                                       "2. Log into account\n" +
                                       "0. Exit");
            return userChoice();
        }

        public int createCard() {
            Card card = dataFacade.createCard();
            System.out.printf("\nYour card has been created\n" +
                                      "Your card number:\n" +
                                      "%s\n" +
                                      "Your card PIN:\n" +
                                      "%s\n", card.getNumber(), card.getPin());
            return 0;
        }

        public int logIntoAccount() {
            System.out.println("\nEnter your card number:");
            final String number = scanner.nextLine();
            System.out.println("Enter your PIN:");
            final String pin = scanner.nextLine();

            return dataFacade.getCurrentCard(number, pin) == null ? 0 : 1;
        }

        public int wrongCard() {
            System.out.println("\nWrong card number or PIN!");
            return 0;
        }

        public int loggedIn() {
            System.out.println("\nYou have successfully logged in!");
            return 0;
        }

        public int accountMenu() {
            System.out.println("\n1. Balance\n" +
                                       "2. Log out\n" +
                                       "0. Exit");
            return userChoice();
        }

        public int balance() {
            System.out.println("\nBalance: 0");
            return 0;
        }

        public int logOut() {
            System.out.println("\nYou have successfully logged out!");
            return 0;
        }

        private int userChoice() {
            return Integer.parseInt(scanner.nextLine());
        }
    }
  learner_created: true
- name: src/banking/dao/Card.java
  visible: true
  text: |
    package banking.dao;

    public class Card {
        private String number;
        private String pin;

        public Card(String number, String pin) {
            this.number = number;
            this.pin = pin;
        }

        public String getNumber() {
            return number;
        }

        public String getPin() {
            return pin;
        }
    }
  learner_created: true
- name: src/banking/dao/CardDao.java
  visible: true
  text: |
    package banking.dao;

    public interface CardDao {

        Card getCard(String number);

        boolean numberIsUnique(String number);

        void saveCard(Card card);
    }
  learner_created: true
- name: src/banking/dao/impl/sql/package-info.java
  visible: true
  text: package banking.dao.impl.sql;
  learner_created: true
- name: src/banking/dao/impl/memory/MemoryCardDao.java
  visible: true
  text: |
    package banking.dao.impl.memory;

    import banking.dao.Card;
    import banking.dao.CardDao;

    import java.util.LinkedHashMap;
    import java.util.Map;

    public class MemoryCardDao implements CardDao {

        private final Map<String, Card> cardMap = new LinkedHashMap<>();

        @Override
        public Card getCard(String number) {
            return cardMap.get(number);
        }

        @Override
        public boolean numberIsUnique(String number) {
            return !cardMap.containsKey(number);
        }

        @Override
        public void saveCard(Card card) {
            cardMap.put(card.getNumber(), card);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 02 Nov 2021 21:52:53 UTC
record: -1
